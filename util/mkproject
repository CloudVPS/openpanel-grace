#!/bin/sh
TEST=`echo -n ""`
if [ -z "$TEST" ]; then
  ECHON="echo -n"
  NNL=""
else
  ECHON="echo"
  NNL="\c"
fi

ask() {
  $ECHON "$*$NNL"
}

DOMAIN=application
if [ ! -z "$1" ]; then
  if [ "$1" = "-d" ]; then
    DOMAIN=daemon
    shift
  fi
fi

if [ ! -z "$1" ]; then
  APPNAME="$1"
  if [ ! -z "$2" ]; then
    APPDOMAIN="$2"
  fi
fi

if [ -z "$APPNAME" ]; then
  ask "Application name: "
  read APPNAME
fi

APPCNAME=`echo "$APPNAME" | sed -e "s/ //g" | tr A-Z a-z`

if [ -z "$APPDOMAIN" ]; then
  ask "Domain [nl.madscience.unregistered.apps]: "
  read APPDOMAIN
  if [ -z "$APPDOMAIN" ]; then
    APPDOMAIN=nl.madscience.unregistered.apps
  fi
fi

DIRNAME="$APPDOMAIN.$APPCNAME"
mkdir "$DIRNAME"
echo "$APPDOMAIN.$APPCNAME" > "$DIRNAME"/.appid
echo "$APPNAME" > "$DIRNAME/.appname"
mkdir "$DIRNAME/$APPNAME.app"
mkdir "$DIRNAME/rsrc"

if [ "$DOMAIN" = "application" ]; then

cat > "$DIRNAME/$APPCNAME.h" << __END__
#ifndef _${APPCNAME}_H
#define _${APPCNAME}_H 1
#include <grace/application.h>

//  -------------------------------------------------------------------------
/// Main application class.
//  -------------------------------------------------------------------------
class ${APPCNAME}App : public application
{
public:
		 	 ${APPCNAME}App (void) :
				application ("$APPDOMAIN.$APPCNAME")
			 {
			 }
			~${APPCNAME}App (void)
			 {
			 }

	int		 main (void);
};

#endif
__END__

cat > "$DIRNAME/main.cpp" << __END__
#include "${APPCNAME}.h"

APPOBJECT(${APPCNAME}App);

//  =========================================================================
/// Main method.
//  =========================================================================
int ${APPCNAME}App::main (void)
{
	return 0;
}

__END__

else

cat > "$DIRNAME/$APPCNAME.h" << __END__
#ifndef _${APPCNAME}_H
#define _${APPCNAME}_H 1
#include <grace/daemon.h>
#include <grace/configdb.h>

//  -------------------------------------------------------------------------
/// Implementation template for application config.
//  -------------------------------------------------------------------------
typedef configdb<class ${APPCNAME}App> appconfig;

//  -------------------------------------------------------------------------
/// Main daemon class.
//  -------------------------------------------------------------------------
class ${APPCNAME}App : public daemon
{
public:
		 				 ${APPCNAME}App (void);
		 				~${APPCNAME}App (void);
		 	
	int					 main (void);
	
protected:
	bool				 confLog (config::action act, keypath &path,
								  const value &nval, const value &oval);

	appconfig			 conf;
};

#endif
__END__

cat > "$DIRNAME/main.cpp" << __END__
#include "${APPCNAME}.h"

APPOBJECT(${APPCNAME}App);

//  =========================================================================
/// Constructor.
/// Calls daemon constructor, initializes the configdb.
//  =========================================================================
${APPCNAME}App::${APPCNAME}App (void)
	: daemon ("${APPDOMAIN}.${APPCNAME}"),
	  conf (this)
{
}

//  =========================================================================
/// Destructor.
//  =========================================================================
${APPCNAME}App::~${APPCNAME}App (void)
{
}

//  =========================================================================
/// Main method.
//  =========================================================================
int ${APPCNAME}App::main (void)
{
	string conferr; ///< Error return from configuration class.
	
	// Add watcher value for event log. System will daemonize after
	// configuration was validated.
	conf.addwatcher ("system/eventlog", &${APPCNAME}App::confLog);
	
	// Load will fail if watchers did not valiate.
	if (! conf.load ("$APPDOMAIN.$APPCNAME", conferr))
	{
		ferr.printf ("%% Error loading configuration: %s\n", conferr.str());
		return 1;
	}
	
	log (log::info, "main", "Started");
	sleep (1);
	
	stoplog();
	return 0;
}

//  =========================================================================
/// Configuration watcher for the event log.
//  =========================================================================
bool ${APPCNAME}App::confLog (config::action act, keypath &kp,
							  const value &nval, const value &oval)
{
	string tstr;
	
	switch (act)
	{
		case config::isvalid:
			// Check if the path for the event log exists.
			tstr = strutil::makepath (nval.sval());
			if (! tstr.strlen()) return true;
			if (! fs.exists (tstr))
			{
				ferr.printf ("%% Event log path %s does not exist",
							 tstr.str());
				return false;
			}
			return true;
			
		case config::create:
			// Set the event log target and daemonize.
			fout.printf ("%% Event log: %s\n\n", nval.cval());
			addlogtarget (log::file, nval.sval(), 0xff, 1024*1024);
			daemonize();
			return true;
	}
	
	return false;
}

__END__

cat > "$DIRNAME/rsrc/$APPDOMAIN.$APPCNAME.conf.xml" << __END__
<?xml version="1.0" encoding="utf-8"?>
<$APPDOMAIN.$APPCNAME.conf>
  <system>
    <eventlog>event.log</eventlog>
  </system>
</$APPDOMAIN.$APPCNAME.conf>
__END__

cat > "$DIRNAME/rsrc/$APPDOMAIN.$APPCNAME.schema.xml" << __END__
<?xml version="1.0" encoding="utf-8"?>
<xml.schema>
  <xml.class name="$APPDOMAIN.$APPCNAME.conf">
    <xml.type>dict</xml.type>
    <xml.proplist>
      <xml.member class="system" id="system"/>
    </xml.proplist>
  </xml.class>
  <xml.class name="system">
    <xml.type>dict</xml.type>
    <xml.proplist>
      <xml.member class="eventlog" id="eventlog"/>
    </xml.proplist>
  </xml.class>
  <xml.class name="eventlog">
    <xml.type>string</xml.type>
  </xml.class>
</xml.schema>
__END__

cat > "$DIRNAME/rsrc/$APPDOMAIN.$APPCNAME.validator.xml" << __END__
<?xml version="1.0" encoding="utf-8"?>
<grace.validator>
  <datarule id="root">
    <match.mandatory>
      <mandatory type="child" key="system"/>
    </match.mandatory>
    <match.child>
      <and>
        <match.id>system</match.id>
        <match.rule>system</match.rule>
      </and>
    </match.child>
  </datarule>
  
  <datarule id="system">
    <match.mandatory>
      <mandatory type="child" key="eventlog"/>
    </match.mandatory>
    <match.child>
      <match.id>eventlog</match.id>
    </match.child>
  </datarule>

</grace.validator>
__END__
fi

cat > "$DIRNAME/rsrc/grace.runoptions.xml" << __END__
<?xml version="1.0" encoding="utf-8"?>
<grace.runoptions>
  <grace.option id="-h">
    <grace.long>--help</grace.long>
  </grace.option>
  <grace.option id="--help">
    <grace.argc>0</grace.argc>
  </grace.option>
</grace.runoptions>
__END__
cat > "$DIRNAME/Makefile" << __END__
include makeinclude

OBJ	= main.o

all: ${APPNAME}.exe
	mkapp ${APPNAME}

${APPNAME}.exe: \$(OBJ)
	\$(LD) \$(LDFLAGS) -o ${APPNAME}.exe \$(OBJ) \$(LIBS)

clean:
	rm -f *.o *.exe
	rm -rf ${APPNAME}.app
	rm -f ${APPNAME}

makeinclude:
	@echo please run ./configure
	@false

SUFFIXES: .cpp .o
.cpp.o:
	\$(CXX) \$(CXXFLAGS) \$(INCLUDES) -c \$<
__END__
sed 's/^X//' >"$DIRNAME/configure" << 'END-of-configure'
X#!/bin/sh
X# ===========================================================================
X# Configure script generated by tina (revision 1e707449283c (default))
X# ===========================================================================
X
X# ---------------------------------------------------------------------------
X# Solaris' /bin/sh uses a braindead builtin echo, circumvent
X# ---------------------------------------------------------------------------
XTEST=`echo -n ""`
Xif [ -z "$TEST" ]; then
X  ECHON="echo -n"
X  NNL=""
Xelse
X  ECHON="echo"
X  NNL="\c"
Xfi
X
X# ---------------------------------------------------------------------------
X# Useful functions for command line argument parsing
X# ---------------------------------------------------------------------------
Xusage ()
X{
X  S=`echo "$0" | sed -e "s/./ /g"`
X  cat << EOF
XUsage: $0 [--quiet]             Quiet mode [-q]
X       $S [--prefix p]          Set root install-prefix
X       $S [--exec-prefix p]     Set executable install-prefix
X       $S [--lib-prefix p]      Set library install-prefix
X       $S [--conf-prefix p]     Set configuration install-prefix
X       $S [--include-prefix p]  Set include-files install-prefix
XEOF
X  exit 1
X}
XQUIET=0
X
X# Checks for an option that is defined as --foo=bar. Returns 1 if so, or
X# 0 if not. Caller can use this to shift in cases of "--foo bar".
Xparseopt() {
X  withvalue=`echo "$1" | sed -e "s/.*=.*//"`
X  if [ ! -z "$withvalue" ]; then
X    return 0
X  fi
X  return 1
X}
X
X# Part two of the "--foo bar" eq "--foo=bar" trick: Use sed to strip the
X# --foo= off the second variation. In either case we'll end up with "bar".
Xparsearg() {
X	echo "$2" | sed -e "s/--${1}=//"
X}
X
X# Determine whether we're logged in as root.
Xisroot() {
X	uid=`id | sed -e "s/^uid=//;s/ .*//;s/(.*//"`
X	if [ "$uid" = "0" ]; then
X	  return 0
X	fi
X	return 1
X}
X
X# Combine two paths.
Xmakepath() {
X	echo "${1}${2}" | sed -e "s@//@/@g;s@/\./@/.@g"
X}
X
X# ---------------------------------------------------------------------------
X# Set up sensible defaults for the installation paths
X# ---------------------------------------------------------------------------
Xif isroot; then
X  if [ -d /sw ]; then
X    INOPT_INSTALLROOT="/sw/"
X  elif [ -d /usr/freeware ]; then
X    INOPT_INSTALLROOT="/usr/freeware/"
X  else
X    INOPT_INSTALLROOT="/usr/local/"
X  fi
Xelse
X  if [ -d "$HOME/.lib" ]; then
X    INOPT_INSTALLROOT="$HOME/."
X  elif [ -d "$HOME/Library/Preferences" ]; then
X    INOPT_INSTALLROOT="$HOME/"
X    
X  else
X    INOPT_INSTALLROOT="$HOME/"
X  fi
Xfi
X
XINOPT_INCLUDEPATH="include"
XINOPT_BINPATH="bin"
XINOPT_CONFPATH="etc/conf"
Xif [ ! -d "${INOPT_INSTALLROOT}${INOPT_CONFPATH}" ]; then
X  if [ -d "${INOPT_INSTALLROOT}conf" ]; then
X    INOPT_CONFPATH="conf"
X  elif [ -d "${INOPT_INSTALLROOT}Library/Preferences" ]; then
X    INOPT_CONFPATH="Library/Preferences"
X  elif [ -d "${HOME}/Library/Preferences" ]; then
X    CONFIG_CONFPATH="${HOME}/Library/Preferences"
X  fi
Xfi
X
XINOPT_LIBPATH="lib"
XQUIET=0
X
X# ---------------------------------------------------------------------------
X# Parse the command line arguments
X# ---------------------------------------------------------------------------
XMOREOPTS="yes"
Xwhile [ ! -z "$MOREOPTS" ]; do
X	case "$1" in
X		-h)
X			usage
X			;;
X		--help)
X			usage
X			;;
X		-q)
X			QUIET=1
X			;;
X		--prefix*)
X			if parseopt "$1" "$2"; then shift; fi
X			CONFIG_INSTALLROOT=`parsearg prefix "$1"`
X			CONFIG_INSTALLROOT=`echo "${CONFIG_INSTALLROOT}/" | sed -e "s@//@@g"`
X			CONFIG_BINPATH=`makepath "$CONFIG_INSTALLROOT" "$INOPT_BINPATH"`
X			CONFIG_LIBPATH=`makepath "$CONFIG_INSTALLROOT" "$INOPT_LIBPATH"`
X			CONFIG_CONFPATH=`makepath "$CONFIG_INSTALLROOT" "$INOPT_CONFPATH"`
X			;;
X		--exec-prefix*)
X			if parseopt "$1" "$2"; then shift; fi
X			CONFIG_BINPATH=`parsearg exec-prefix "$1"`
X			;;
X		--lib-prefix*)
X			if parseopt "$1" "$2"; then shift; fi
X			CONFIG_LIBPATH=`parsearg lib-prefix "$1"`
X			;;
X		--conf-prefix*)
X			if parseopt "$1" "$2"; then shift; fi
X			CONFIG_CONFPATH=`parsearg conf-prefix "$1"`
X			;;
X		--include-prefix*)
X			if parseopt "$1" "$2"; then shift; fi
X			CONFIG_INCLUDEPATH=`parsearg include-prefix "$1"`
X			;;
X		--quiet)
X			QUIET=1
X			;;
X		--)
X			MOREOPTS=""
X			;;
X		--*)
X			arg=`echo "$1" | cut -f1 -d=`
X			echo "Unknown option: $arg" >&2
X			exit 1
X			;;
X		*)
X			MOREOPTS=""
X			;;
X	esac
X	if [ ! -z "$MOREOPTS" ]; then shift; fi
Xdone
X
X# ---------------------------------------------------------------------------
X# Merge values from command line to the actual defaults
X# ---------------------------------------------------------------------------
Xif [ -z "$CONFIG_INSTALLROOT" ]; then
X	CONFIG_INSTALLROOT="$INOPT_INSTALLROOT"
Xfi
X
Xif [ -z "$CONFIG_BINPATH" ]; then
X  CONFIG_BINPATH=`makepath "$CONFIG_INSTALLROOT" "$INOPT_BINPATH"`
Xfi
X
Xif [ -z "$CONFIG_LIBPATH" ]; then
X	CONFIG_LIBPATH=`makepath "$CONFIG_INSTALLROOT" "$INOPT_LIBPATH"`
Xfi
X
Xif [ -z "$CONFIG_CONFPATH" ]; then
X	CONFIG_CONFPATH=`makepath "$CONFIG_INSTALLROOT" "$INOPT_CONFPATH"`
Xfi
X
Xif [ -z "$CONFIG_INCLUDEPATH" ]; then
X	CONFIG_INCLUDEPATH=`makepath "$CONFIG_INSTALLROOT" "$INOPT_INCLUDEPATH"`
Xfi
X
X# ---------------------------------------------------------------------------
X# Create the configure.paths file
X# ---------------------------------------------------------------------------
Xcat > configure.paths << _EOF_
XCONFIG_INSTALLROOT="${CONFIG_INSTALLROOT}"
XCONFIG_BINPATH="${CONFIG_BINPATH}"
XCONFIG_LIBPATH="${CONFIG_LIBPATH}"
XCONFIG_CONFPATH="${CONFIG_CONFPATH}"
XCONFIG_INCLUDEPATH="${CONFIG_INCLUDEPATH}"
X_EOF_
X
X# Display paths if our pie-hole is not closed administratively.
Xif [ $QUIET = 0 ]; then cat configure.paths; fi
X
X# ---------------------------------------------------------------------------
X# Provide a bunch of useful tools to our snippets
X# ---------------------------------------------------------------------------
Xsaypending ()
X{
X  if [ $QUIET = 1 ]; then
X    PENDING=$1
X  else
X    $ECHON "$1: $NNL"
X  fi
X}
X
Xsaypass ()
X{
X  if [ $QUIET = 1 ]; then
X    : # nothing
X  else
X    echo "$1"
X  fi
X}
X
Xsayfail ()
X{
X  if [ $QUIET = 1 ]; then
X    echo "$PENDING: $1" >&2
X    exit 1
X  else
X    echo "$1"
X    exit 1
X  fi
X}
X
Xsayfailsoft ()
X{
X  if [ $QUIET = 1 ]; then
X    echo "$PENDING: $1" >&2
X  else
X    echo "$1"
X  fi
X}
X
Xechowarn ()
X{
X	if [ $QUIET = 1 ]; then
X	  :
X	else
X	  echo "$1"
X	fi
X}
X# ---------------------------------------------------------------------------
X# Figure out if there's a Vendorware C++ compiler on board
X# ---------------------------------------------------------------------------
X
Xsaypending "looking for c++ compiler"
XCXX=`which CC 2>/dev/null`
X
Xif [ -f "$CXX" ]; then
X  actually_gcc=`$CXX -v 2>&1 | grep gcc | sed -e "s/^gcc/Y/"`
X
X  cat >conftest.cpp <<_eof_
X#include <stdio.h>
Xint main(int argc, char *argv[]) {
X  printf ("hello, nurse\n");
X}
X_eof_
X
X  $CXX -o conftest.bin conftest.cpp >/dev/null 2>&1 || actually_gcc="YES"
X  rm -f conftest.cpp conftest.bin >/dev/null 2>&1
X  if [ ! -z "$actually_gcc" ]; then
X    CXX=""
X  fi
Xfi
X
XDYNEXT="so"
X
Xif [ -f "$CXX" ]; then
X  saypass "$CXX"
X  CXXFLAGS="-n32 -O"
X  SHARED="-shared"
X  LD="$CXX"
X  LDSHARED="$CXX -shared $LDFLAGS"
X  LDFLAGS=""
Xelse
X  CXX=`which g++`
X  if [ -f "$CXX" ]; then
X    saypass "$CXX"
X    CXXFLAGS=${CXXFLAGS}
X    un=`uname`
X    if [ "$un" = "Darwin" ]; then
X      SHARED="-fno-common"
X      LDSHARED="$CXX $LDFLAGS -dynamiclib -undefined dynamic_lookup"
X      DYNEXT="dylib"
X    else
X      SHARED="-shared -fPIC"
X      LDSHARED="\$(COMPILER) -shared \$(LDFLAGS)"
X    fi
X    LD="$CXX"
X    LDFLAGS=""
X  else
X    sayfail "fail"
X    CXX=""
X    exit 1;
X  fi
Xfi
X
XCOMPILER=${CXX}
XCOMPILERFLAGS=${CXXFLAGS}
X# ---------------------------------------------------------------------------
X# Figure out path to Grace include
X# ---------------------------------------------------------------------------
X
Xsaypending "looking for grace include"
Xfor loc in /sw/include /usr/local/include /usr/X11R6/include /usr/include $HOME/include ../../include $HOME/.include; do
X  if [ -f "$loc/grace/str.h" ]; then
X    GRACEINC="$loc"
X  fi
Xdone
Xif [ -z "$GRACEINC" ]; then
X  sayfail "failed"
X  exit 1
Xfi
Xsaypass "$GRACEINC"
X
X# ---------------------------------------------------------------------------
X# Figure out path to Grace library
X# ---------------------------------------------------------------------------
X
Xsaypending "looking for grace library"
Xfor loc in /sw/lib /usr/lib32 /usr/lib64 /usr/lib /usr/local/lib /usr/freeware/lib $HOME/lib $HOME/.lib ../../lib; do
X  if [ -f "$loc/libgrace.$DYNEXT" ]; then
X    LIBGRACE="-L$loc -lgrace"
X  fi
Xdone
Xif [ -z "$LIBGRACE" ]; then
X  sayfail "failed"
X  exit 1
Xfi
Xsaypass "$LIBGRACE"
X
X# ---------------------------------------------------------------------------
X# Check for libpthread functionality
X# ---------------------------------------------------------------------------
X
Xcat >conftest.c <<EOF
X#include <pthread.h>
X#include <stdio.h>
X
Xint main (int argc, char *argv[])
X{
X	pthread_attr_t attr;
X	pthread_mutexattr_t mattr;
X	
X	pthread_attr_init (&attr);
X	pthread_mutexattr_init (&mattr);
X	return 1;
X}
XEOF
X
Xsaypending "checking for pthread support"
Xif $COMPILER $COMPILERFLAGS -o conftest conftest.c >>configure.log 2>&1; then
X  LIBPTHREAD=""
X  saypass "yes"
Xelse
X  if $COMPILER $COMPILERFLAGS -o conftest conftest.c -lpthread >>configure.log 2>&1; then
X    LIBPTHREAD="-lpthread"
X	saypass "-lpthread"
X  elif $COMPILER $COMPILERFLAGS -o conftest conftest.c -lc_r >>configure.log 2>&1; then
X    LIBPTHREAD="-lc_r"
X    saypass "-lc_r"
X  else
X    sayfail "no - This application needs a working pthreads implementation."
X  fi
Xfi
X
Xsaypending "checking for ctime_r"
Xcat > conftest.c << EOF
X#include <time.h>
Xint main (int argc, char *argv[])
X{
X	char buf[256];
X	char *result;
X	time_t ti;
X	result = ctime_r (&ti, buf);
X	return 0;
X}
XEOF
Xif $COMPILER $COMPILERFLAGS -o conftest.o -c conftest.c >>configure.log 2>&1; then
X  saypass "time.h"
Xelse
X  cat > conftest.c << EOF
X#define _POSIX_C_SOURCE 199506L
X#define _POSIX_PTHREAD_SEMANTICS 1
X#define _XOPEN_SOURCE 1
X#define __EXTENSIONS__ 1
X#include <pthread.h>
X#include <time.h>
Xint main (int argc, char *argv[])
X{
X	char buf[256];
X	char *result;
X	time_t ti;
X	result = ctime_r (&ti, buf);
X	return 0;
X}
XEOF
X  if $COMPILER $COMPILERFLAGS -o conftest.o -c conftest.c >>configure.log 2>&1; then
X    saypass "time.h with solaris twist"
X    CTIME_R_INCLUDE="#include <pthread.h>"
X    CTIME_R_PTHREAD_DEFINE="#define _POSIX_PTHREAD_SEMANTICS 1"
X    CTIME_R_XOPEN_DEFINE="#define _XOPEN_SOURCE 1"
X    CTIME_R_XPG_DEFINE="#define __EXTENSIONS__ 1"
X    CTIME_R_DEFINE="#define _POSIX_C_SOURCE 199506L"
X  else
X    sayfail "screwed"
X  fi
Xfi
X
Xsaypending "checking for pthread_rwlock_t"
Xcat > conftest.c << EOF
X#include <pthread.h>
Xint main (int argc, char *argv[])
X{
X	pthread_rwlock_t *rwlock;
X	pthread_rwlock_trywrlock (rwlock);
X	return 0;
X}
XEOF
Xif $COMPILER $COMPILERFLAGS -o conftest.o -c conftest.c >>configure.log 2>&1; then
X  saypass "yes"
X  PTHREAD_HAVE_RWLOCK="#define PTHREAD_HAVE_RWLOCK 1"
X  saypending "checking for pthread_rwlock_timedwrlock"
X  cat > conftest.c << EOF
X#include <pthread.h>
X#include <time.h>
Xint main (int argc, char *argv[])
X{
X	pthread_rwlock_t *rwlock;
X	struct timespec ts;
X	pthread_rwlock_timedwrlock (rwlock, &ts);
X	return 0;
X}
XEOF
X  if $COMPILER $COMPILERFLAGS -o conftest.o -c conftest.c >> configure.log 2>&1; then
X    saypass "yes"
X    PTHREAD_HAVE_TIMEDLOCK="#define PTHREAD_HAVE_TIMEDLOCK 1"
X  else
X    saypass "no"
X    PTHREAD_HAVE_TIMEDLOCK=""
X  fi
Xelse
X  saypass "no"
X  PTHREAD_HAVE_RWLOCK=""
X  PTHREAD_HAVE_TIMEDLOCK=""
Xfi
X
X
Xrm -f conftest conftest.o conftest.c
X# ---------------------------------------------------------------------------
X# Figure out whether we need libsocket
X# ---------------------------------------------------------------------------
X
Xcat >conftest.c <<EOF
X#include <sys/types.h>
X#include <sys/socket.h>
X
Xint main (int argc, char *argv[])
X{
X    int test = socket(PF_INET, SOCK_STREAM, 0);
X    return 1;
X}
XEOF
X
Xsaypending "checking whether socket needs -lsocket"
Xif $COMPILER $COMPILERFLAGS -o conftest conftest.c >>configure.log 2>&1; then
X  LIBSOCKET=""
X  saypass "no"
Xelse
X  LIBSOCKET="-lsocket"
X  saypass "yes"
Xfi
X
Xrm -f conftest.c conftest
X
X# ---------------------------------------------------------------------------
X# Figure out whether we need libnsl
X# ---------------------------------------------------------------------------
X
Xcat >conftest.c <<EOF
X#include <netdb.h>
X
Xint main (int argc, char *argv[])
X{
X	struct hostent *h = gethostbyname("localhost");
X    return 1;
X}
XEOF
X
Xsaypending "checking whether gethostbyname needs -lnsl"
Xif $COMPILER $COMPILERFLAGS -o conftest conftest.c >>configure.log 2>&1; then
X  LIBNSL=""
X  saypass "no"
Xelse
X  LIBNSL="-lnsl"
X  saypass "yes"
Xfi
X
Xrm -f conftest.c conftest
X
X# ---------------------------------------------------------------------------
X# Figure out whether socklen_t is defined
X# ---------------------------------------------------------------------------
X
Xcat >conftest.c <<EOF
X#include <sys/types.h>
X#include <sys/socket.h>
X#include <netinet/in.h>
X#include <arpa/inet.h>
X
Xint main(int argc, char *argv[])
X{
X	socklen_t len = (socklen_t) 4;
X	return 1;
X}
XEOF
X
Xsaypending "checking whether socklen_t needs to be defined"
Xif $COMPILER $COMPILERFLAGS -o conftest conftest.c >> configure.log 2>&1; then
X  SOCKLEN_TYPEDEF=""
X  saypass "no"
Xelse
X  SOCKLEN_TYPEDEF="typedef int socklen_t;"
X  saypass "yes"
Xfi
X
Xrm -f conftest conftest.c
X
X
X# ---------------------------------------------------------------------------
X# Figure out whether we need libdl
X# ---------------------------------------------------------------------------
X
Xcat >conftest.cpp <<EOF
X#include <dlfcn.h>
Xint main (int argc, char *argv[])
X{
X   void *test = dlopen ("conftest.so",RTLD_LAZY);
X   return 1;
X}
XEOF
X
Xsaypending "checking whether dlopen needs -ldl"
Xif $CXX $CXXFLAGS -o conftest conftest.cpp >>configure.log 2>&1; then
X  LIBDL=""
X  saypass "no"
Xelse
X  LIBDL="-ldl"
X  saypass "yes"
Xfi
X
Xcat >conftest.cpp <<EOF
X#include <stdio.h>
X#include <unistd.h>
X#include <dlfcn.h>
X#include <sys/types.h>
Xextern "C" int find_me (void)
X{
X	return 1;
X}
X
Xtypedef int (*fptr)(void);
X
Xint main (int argc, char *argv[])
X{
X
X	void *test = dlopen (NULL,RTLD_LAZY);
X	fptr func = (fptr) dlsym (test, "find_me");
X	if (! func) return 1;
X	int res = (*func)();
X	if (res == 1) return 0;
X	return 1;
X}
XEOF
X
Xsaypending "checking need for export-dynamic"
Xif $CXX $CXXFLAGS -c -o conftest.o conftest.cpp >> configure.log 2>&1; then
X  :
Xelse
X  sayfail "error"
Xfi
Xif $LD $LDFLAGS -o conftest conftest.o $LIBDL >>configure.log 2>&1; then
X  if ./conftest; then
X    LIBDL_LDFLAGS=""
X    saypass "no"
X  elif $LD $LDFLAGS -Wl,--export-dynamic -o conftest conftest.o $LIBDL >> configure.log 2>&1; then
X	if ./conftest; then
X	  LIBDL_LDFLAGS="-Wl,--export-dynamic"
X	  saypass "yes"
X	else
X	  saypass "no"
X	  echowarn "warning: no suitable method found to resolve internal symbols of the "
X	  echowarn "         running process, library-defined optional initialization "
X	  echowarn "         hooks may not work as advertised"
X	fi
X  else
X    saypass "no"
X	echowarn "warning: no suitable method found to resolve internal symbols of the "
X	echowarn "         running process, library-defined optional initialization "
X	echowarn "         hooks may not work as advertised"
X  fi
Xelse
X  sayfail "error - libdl linking not working out"
Xfi
X
Xrm -f conftest.cpp conftest
X
X
X# ---------------------------------------------------------------------------
X# Figure out whether we need libcrypt
X# ---------------------------------------------------------------------------
X
Xcat >conftest.c <<EOF
X#include <crypt.h>
Xint main (int argc, char *argv[])
X{
X  char *test = crypt("abcdefg","aB");
X  return 1;
X}
XEOF
X
Xsaypending "checking where crypt() hides"
Xif $COMPILER $COMPILERFLAGS -o conftest.o -c conftest.c >> configure.log 2>&1; then
X  CRYPTH="#include <crypt.h>"
X  saypass "crypt.h"
Xelse
Xcat >conftest.c <<EOF
X#include <unistd.h>
Xint main (int argc, char *argv[])
X{
X   char *test = crypt("abcdefg","aB");
X   return 1;
X}
XEOF
Xif $COMPILER $COMPILERFLAGS -o conftest.o -c conftest.c >>configure.log 2>&1; then
X  saypass "unistd.h"
X  CRYPTDEFINE=""
Xelse
Xcat >conftest.c <<EOF
X#define _XOPEN_SOURCE
X#include <unistd.h>
Xint main (int argc, char *argv[])
X{
X   char *test = crypt("abcdefg","aB");
X   return 1;
X}
XEOF
Xif $COMPILER $COMPILERFLAGS -o conftest.o -c conftest.c >>configure.log 2>&1; then
X  saypass "unistd.h"
X  CRYPTDEFINE="#define _XOPEN_SOURCE"
Xelse
X  cat > conftest.c <<EOF
X#define _XOPEN_SOURCE 5
X#include <unistd.h>
Xint main (int argc, char *argv[])
X{
X    char *test = crypt("abcdefg","aB");
X    return 1;
X}
XEOF
Xif $COMPILER $COMPILERFLAGS -o conftest.o -c conftest.c >> configure.log 2>&1; then
X  saypass "unistd.h (evil netbsd)"
X  CRYPTDEFINE="#define _XOPEN_SOURCE 5"
Xelse
X  sayfail "failed"
X  exit 1
Xfi
Xfi
Xfi
Xfi
Xsaypending "checking whether crypt needs -lcrypt"
Xif $COMPILER $COMPILERFLAGS -o conftest conftest.o >>configure.log 2>&1; then
X  LIBCRYPT=""
X  saypass "no"
Xelse
X  LIBCRYPT="-lcrypt"
X  saypass "yes"
Xfi
X
Xrm -f conftest.c conftest.o conftest
X# ---------------------------------------------------------------------------
X# Create the makeinclude file
X# ---------------------------------------------------------------------------
X
Xsaypending "creating makeinclude"
X
XDATE=`date`
X
Xcat >makeinclude <<EOF
X# Makeinclude generated by configure: $DATE
X
XCOMPILER = $COMPILER
XCOMPILERFLAGS = $COMPILERFLAGS
XCXX = $CXX
XCXXFLAGS = $CXXFLAGS
XDYNEXT = $DYNEXT
XINCLUDES = -I$GRACEINC
XLD = $LD
XLDFLAGS = $LDFLAGS $LIBDL_LDFLAGS
XLDL = $LIBDL
XLDSHARED = $LDSHARED
XLGRACE = $LIBGRACE
XLIBS = $LIBGRACE $LIBPTHREAD $LIBSOCKET $LIBNSL $LIBDL $LIBCRYPT
XLPTHREAD = $LIBPTHREAD
XLSOCKET = $LIBSOCKET $LIBNSL
XSHARED = $SHARED
XEOF
X
Xsaypass "done"
X# ---------------------------------------------------------------------------
X# Create the platform.h file
X# ---------------------------------------------------------------------------
X
Xsaypending "creating platform.h"
X
Xcat >platform.h <<EOF
X#ifndef _PLATFORM_H
X#define _PLATFORM_H
X$CTIME_R_DEFINE
X$CTIME_R_PTHREAD_DEFINE
X$CTIME_R_XOPEN_DEFINE
X$CTIME_R_XPG_DEFINE
X$CTIME_R_INCLUDE
X$PTHREAD_HAVE_RWLOCK
X$PTHREAD_HAVE_TIMEDLOCK$SOCKLEN_TYPEDEF
X$CRYPTH
X$CRYPTDEFINE
X#endif
XEOF
X
Xsaypass "done"
Xif [ -f configure.log ]; then rm -f configure.log; fi
X
END-of-configure

chmod 755 "$DIRNAME/configure"
cat > "$DIRNAME/configure.in" << __EOF__
cxx
grace
pthread
libsocket
libdl
libcrypt
__EOF__

echo "Project <$APPDOMAIN.$APPCNAME> created"
