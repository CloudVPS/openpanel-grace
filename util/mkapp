#!/bin/sh

# ===========================================================================
# Print an error and exit
# ===========================================================================
fail() {
  echo "$*" >&2
  exit 1
}

# ===========================================================================
# Write a string to stdout with no newline
# ===========================================================================
puts() {
  if [ -z "$__ECHON" ]; then
	echotest=`echo -n`
	if [ -z "$echotest" ]; then
	  __ECHON="echo -n"
	  __NHL=""
	else
	  __ECHON="echo"
	  __NHL="\c"
	fi
  fi
  $__ECHON "$*$__NHL"
}

# ===========================================================================
# Derive system's architecture signature
# ===========================================================================
getarch() {
  UN_OS=`uname -o 2>/dev/null || uname`
  UN_PROC=`( uname -i 2>/dev/null || uname -p 2>/dev/null || uname -m ) | cut -f1 -d,`
  
  if [ "$UN_OS" = "GNU/Linux" ]; then
	UN_OS="Linux"
  fi
  
  if [ "$UN_PROC" = "unknown" ]; then
	if [ "$UN_OS" = "Cygwin" ]; then
	  UN_PROC=i386
	fi
  fi
  
  echo "$UN_OS.$UN_PROC"
}

# ===========================================================================
# Get default from mkproject output
# ===========================================================================
getprojectdefaults() {
  if [ -f .appname ]; then
    appname=$(cat .appname)
  fi
  if [ -f .appid ]; then
    appid=$(cat .appid)
  fi
}

# ===========================================================================
# Verify a string for a given suffix
# ===========================================================================
endswith() {
  what="$1"
  with="$2"
  orly=`echo "$1" | sed -e "s/.*${with}$/YES/"`
  if [ "$orly" = "YES" ]; then
    return 0
  fi
  return 1
}

# ===========================================================================
# Create a .app bundle directory
# ===========================================================================
mkappdir() {
  puts "> Creating ${1}..."
  dstnam=$(echo "$1" | sed -e "s/\.app$//")
  if [ -d "$1" ]; then
    rm -rf "$1"
  fi
  rm -f "$dstnam"
  mkdir -p "$1"
  echo " OK"
}

# ===========================================================================
# Install an executable into a .app bundle
# ===========================================================================
installexe() {
  puts "> Installing executable..."
  fn="$1"
  dst="$2"
  ar="$3"
  dstnam=$(echo "$dst" | sed -e "s/\.app$//")
  apdnam=$(echo "$dst" | sed -e "s/.*\///")
  
  mkdir -p "${dst}/Contents/${ar}"
  cp "$fn" "${dst}/Contents/${ar}/${fn}"
  chmod 755 "${dst}/Contents/${ar}/${fn}"
  ln -s "Contents/${ar}/${fn}" "${dst}/exec"
  ln -s "${apdnam}/exec" "$dstnam"
  echo " OK"
}

# ===========================================================================
# Install a resource file into a .app bundle
# ===========================================================================
installrsrc() {
  fn="$1"
  dst="$2"
  typ="$3"
  nam=$(echo "$1" | sed -e "s/.*\///")
  
  mkdir -p "${dst}/Contents/${typ}"
  cp "$fn" "${dst}/Contents/${typ}/${nam}"
  chmod 644 "${dst}/Contents/${typ}/${nam}"
}

# ===========================================================================
# MAIN
# ===========================================================================
getprojectdefaults

# ---------------------------------------------------------------------------
# Get command line arguments
# ---------------------------------------------------------------------------
while [ ! -z "$1" ]; do
  case "$1" in
  	"--appid")
  		shift
  		appid="$1"
  		shift
  		;;
  	"--appname")
  		shift
  		appname="$1"
  		shift
  		;;
  	"--dest")
  		shift
  		destdir=$(echo "$1" | sed -e "s/\/$//")
  		shift
  		;;
  	*)
  		appname="$1"
  		shift
  		;;
 esac
done

if [ -z "$destdir" ]; then
  destdir="."
fi

if [ -z "$appname" ]; then
  fail No appname provided and no .appname file found.
fi

arch=$(getarch)

# ---------------------------------------------------------------------------
# Start building the bundle
# ---------------------------------------------------------------------------
echo "* Building ${appname} for ${arch}:"

execfile="${appname}.exe"
appdir="${destdir}/${appname}.app"
mkappdir "$appdir"
installexe "$execfile" "$appdir" "$arch"

# ---------------------------------------------------------------------------
# Install resource files
# ---------------------------------------------------------------------------
if [ -d rsrc ]; then
  find rsrc -type f -print | while read rsrc; do
	puts "> Installing ${rsrc}..."
	if endswith "$rsrc" ".xml"; then
	  subtype=$(echo "$rsrc" | sed -e "s/.xml$//;s/.*\.//")
	  case "$subtype" in
		"schema")
			installrsrc "$rsrc" "$appdir" "Schemas"
			;;
		"validator")
			installrsrc "$rsrc" "$appdir" "Schemas"
			;;
		"conf")
			installrsrc "$rsrc" "$appdir" "Configuration Defaults"
			;;
		*)
			installrsrc "$rsrc" "$appdir" "Resources"
			;;
	  esac
	else
	  if endswith "$rsrc" ".thtml"; then
		installrsrc "$rsrc" "$appdir" "Templates"
	  else
		installrsrc "$rsrc" "$appdir" "Resources"
	  fi
	fi
	echo " OK"
  done
fi

# ---------------------------------------------------------------------------
# Install tools
# ---------------------------------------------------------------------------
if [ -d tools ]; then
  for tool in tools/*; do
    installrsrc "$tool" "$appdir" "Tools"
  done
fi
