The GRACE library revolves around a number of central ideas about software
development as I ran into limitations of the programmer and the weaknesses
in the processes that guide programming.

Most of the sensitive work in programming projects involves creating
a data model. This model tends to become a cornerstone of the codebase
and it is usually here where working with other code becomes cumbersome.
At its core, GRACE offers a way to embrace the flexibility of XML-based
data models from within C++-applications.

GRACE relies on operator overloading and could be cussed for this alone,
but the compact syntax that results from this has a positive flip-side:
Accessing data members from a complex tree or record becomes about as
easy as accessing a member value from a struct. As an added bonus, the
data can be portably exchanged with other software that may be written in
another language, or even for another platform.

The real power of XML is that, if properly used, a lot of data structures
are self-documented to the human eye. GRACE makes it possible for
applications to use bundle directories and other parts of the Unix
filesystem to expose self-documenting aspects of the programming logic
to the outside world.

The goal for any part of functionality wrapped into GRACE is that it makes
it possible to express common tasks in less lines with more legible code.
As a secondary objective, the number of concepts at the bottom line should
be kept low. New concepts should evolve themselves as manifestations of
earlier work.
