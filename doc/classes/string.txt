The string class                                  GRACE Library Documentation

1.INTRODUCTION

The GRACE string class is intended as a replacement for most situations
where traditional C character arrays are used within the Unix environment.
The string class is internally represented as a growable array, which
should prevent buffer overflow scenarios prevalent in string handling using
traditional C strings.


2.IMPLEMENTATION DETAILS

To keep performance and memory usage within reasonable limits, while making
it possible to use strings as input and output parameters to functions and
method calls, the string class employs a couple of neat tricks:

  * When you assign one string object to the value of another, the string
    data is not directly duplicated; A reference is added to a shared bit
    of text space. Only when you further manipulate the data in its 'copied'
    state this will result in an extra copy. This copy-on-write mechanism
    makes it less straining to pass string objects around and storing them
    in local variables.

  * When you assign a pointer to a string object to the value of a string
    object, the data will be taken and the original object deleted. This
    makes it easy to return string data from a function call without
    requiring gratuitous copying of the string data or creating a memory
    leak death trap for function users.


3.BEHAVIOR

Native C string arrays are easier to manipulate due to their array nature.
Classful strings therefor need to offer a lot of functionality that will
make it tempting to use them, even though they are harder to directly
manipulate. Through the basic string methods and the strutil utility class
it is fairly easy to manipulate the data without accessing the direct
C array:

  * Create instant substrings through the string::left, string::mid and
    string::right methods
  * Split a string in two using string::cutat
  * Remove terminating end-of-line data with string::striplf
  * Put formatted data inside the string using string::printf
  * Put specific binary data inside using the string::binput* methods
  * Add escaping for special characters using string::escape and
    string::escapexml
  * Cut or expand a string to size using string::crop and string::pad
  * Apply regular expressions to a string using strutil::regexp
  * Split a string according to various rules using the strutil::split*
    methods

You can cast a grace string object to a regular (const char *) using either
the string::str() or string::cval() methods.

It is still possible to access individual characters using the operator[]
method, but you cannot use this to assign new characters to a sub-value.


4.BUGS AND PITFALLS

  - Although tempting, do not treat a string object as a C character array,
    specifically it is pointless to use the [] operator if you want to
    change a character at a certain offset, like in this example:

        string foo = "hullo, world.";
        foo[1] = 'e'; // WRONG! WRONG! DON'T!

    If you really really really want to manipulate individual characters
    inside a string object using an array reference, you can get away with
    using the internal C array by calling string::str(), like in this
    corrected example:

        string foo = "hullo, world.";
        foo.str()[1] = 'e'; // Ugly but ok

    Only do this if you have certainty that the string is of the proper
    length by checking for string::strlen(). Do not try to append to the
    C array and do not count on special meaning of the NUL character, if
    you want to shorten the string use string::crop(). Use the various
    append methods if you want to add data.


5.OPERATORS AND CASTS

  - assignment operators
  
    (string &) ((string) = (const string &))
    (string &) ((string) = (value &))
    (string &) ((string) = (const char *))
    (string &) ((string) = (string &)
    
  - equality checks
  
    (bool) ((string) == (const char *))
    (bool) ((string) == (const string &))
    (bool) ((string) != (const char *))
    (bool) ((string) != (const string &))
  
  - concatenation
  
    (string &) ((string) += (const string &))
    (string &) ((string) += (string *))
    (string &) ((string) += (value *))
    (string &) ((string) += (value &))
    (string &) ((string) += (const char *)
  
  - typecasts
  
    (int)          = (string)
    (const char *) = (string)
    
  - copy constructors
  
    string (const char *)
    string (const string &)
    string (string *)
    

6.SEE ALSO
  - statstring
  - value
