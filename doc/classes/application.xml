<?xml version="1.0" encoding="utf-8"?>
<nl.madscience.lib.grace.doc.class name="httpdobject" type="abstract">

  <!-- RELATIONS ------------------------------------------------------->

  <relations>
    <relation type="base"/>
    <relation type="sub">
      <related>daemon</related>
    </relation>
    <relation type="parent"/>
    <relation type="child">
      <related>file</related>
      <related>value</related>
    </relation>
    <relation type="also">
      <related>grace.runoptions.xml</related>
      <related>APPOBJECT</related>
      <related>mkproject</related>
    </relation>
  </relations>
  <!-- DESCRIPTIONS --------------------------------------------------->

  <synopsis>
    Abstract class defining an application or tool running in the
    foreground.
  </synopsis>
  
  <description>
    The application class is an easy base class for creating applications
    with grace. It takes care of the following tasks:<br>
    <ul>
      <li> Resolving paths to the application object and its resources
      <li> Parsing commandline options according to rules defined in the
           grace.runoptions.xml file
      <li> Loading the resources.xml file
      <li> Setting up the standard input/output/error channels
      <li> Parsing environment variables and path aliases
    </ul>
    <br>
    A default project as created with mkproject already contains a derived
    application object and an APPOBJECT() definition.
  </description>
  
  <!-- CONSTRUCTORS ------------------------------------------------------>

  <constructors>
    <constructor arglist="appid" api="subclass">
      <arguments>
        <argument id="appid" type="const char *">The unique application id</argument>
      </arguments>
      <synopsis>
        Parent constructor
      </synopsis>
      <description>
        The constructor only sets up the environment variables inside env
        and binds the fin, ferr and fout file objects. Most of the real
        work is done in the application::init() method, which is called
        from the default main() function inside the grace library. The reason
        for this is that many of the more complex application-related
        tasks can only be performed when all global objects have been
        properly initialized.
        <p>
        The appid should be something along the line of the
        tld.domainname.applicationtype.applicationname scheme. There are
        no real restrictions, but the name should have some guarantee
        of being unique.
      </description>
    </constructor>
  </constructors>
  
  <!-- VARIABLES ------------------------------------------------------->

  <variables>
  
    <variable name="argv" type="value" api="public">
      <synopsis>Parsed commandline arguments</synopsis>
      <description>
        The commandline arguments passed to the application are parsed
        following the rules in the grace.runoptions.xml file. The
        result is put into this value object. Any unparsed words on
        the commandline are stored as children of the env["*"] array.
        Others are stored under their long option name, so an option
        defined as "-n" and the long option name "--nice" will end up
        in env["--nice"].
      </description>
    </variable>
    
    <variable name="env" type="value" api="public">
      <synopsis>A copy of the unix environment</synopsis>
      <description>
        Unix environment variables are stored in this value object.
      </description>
    </variable>
    
    <variable name="rsrc" type="value" api="public">
      <synopsis>The loaded resources.xml file</synopsis>
      <description>
        When the application is started, the file
        application.app/Contents/Resources/resources.xml is loaded
        into this value object.
      </description>
    </variable>
    
    <variable name="opt" type="value" api="public">
      <synopsis>The loaded grace.runoptions.xml file</synopsis>
      <description>
        The runoptions are loaded into thie value object. This
        object is stored here to allow you to use the application
        object's overloaded creator method to add values instead.
      </description>
    </variable>
    
    <variable name="creator" type="string" api="public">
      <synopsis>The application creator id</synopsis>
      <description>
        The application id as it was passed to the class
        constructor.
      </description>
    </variable>
    
    <variable name="fin" type="file" api="public">
      <synopsis>The standard input as a file object</synopsis>
      <description>
        This object is bound to the standard input channel.
      </description>
    </variable>
    
    <variable name="fout" type="file" api="public">
      <synopsis>The standard output as a file object</synopsis>
      <description>
        This object is bound to the standard output channel.
      </description>
    </variable>

    <variable name="ferr" type="file" api="public">
      <synopsis>The standard error as a file object</synopsis>
      <description>
        This object is bound to the standard error channel.
      </description>
    </variable>

  </variables>

  <!-- PROPERTIES ------------------------------------------------------>

  <properties/>
  
  <!-- METHODS ---------------------------------------------------------->

  <methods>
  
    <method name="init" arglist="argc,argv" api="private">
      <arguments>
        <argument id="argc" type="int">The number of arguments</argument>
        <argument id="argv" type="char **">The argument array</argument>
      </arguments>
      <synopsis>Initialization code</synopsis>
      <description>
        This method is called from the global main() function before
        the overloaded application::main() is called to set up things
        like paths, resources and commandline arguments.
      </description>
    </method>
    
    <method name="main" arglist="" api="subclass">
      <arguments/>
      <synopsis>The unoverloaded main method</synopsis>
      <description>
        Overload this method to implement your application.
      </description>
    </method>
    
  </methods>
</nl.madscience.lib.grace.doc.class>
